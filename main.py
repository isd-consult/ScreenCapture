#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.16
# In conjunction with Tcl version 8.6
#    Oct 10, 2018 04:15:07 AM CST  platform: Windows NT

from selenium import webdriver
from selenium.webdriver.chrome.options import Options

# selenium
prefs = {'profile.managed_default_content_settings.images': 2,
         'disk-cache-size': 4096}
options = Options()
options.add_experimental_option("prefs", prefs)
options.add_argument("--headless")
options.add_argument("--disable-gpu")
options.add_argument("--log-level=3")
options.add_argument('--disable-infobars')
options.add_argument('--disable-extensions')
options.add_argument('--window-size=1920x1080')

# initialize the driver
driver = webdriver.Chrome(
    executable_path="./chromedriver.exe", chrome_options=options)


import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import scraper_support
import threading
from threading import Timer
import time

import os
from datetime import datetime
directory = 'screenshots'


def website_cleaner(web_url):
    web_url = "{}".format(web_url.replace("http://", ""))
    web_url = "{}".format(web_url.replace("https://", ""))
    web_url = "{}".format(web_url.replace("www.", ""))
    # web_url = "{}".format(web_url.replace("web.archive.org/web/", "")) # cleaner for the wayback machine
    cleaned_web_url = "{}".format(web_url.replace("/", "-"))
    return cleaned_web_url


def create_project_dir(directory):
    if not os.path.exists(directory):
        print('Creating directory ' + directory)
        os.makedirs(directory)


def execute_screenshot(driver, url, directory):
    create_project_dir(directory)
    filename = ("{}-{}".format(website_cleaner(url),
                               datetime.now().strftime('%Y-%m-%d-%H-%M-%S'))).replace("--", "-")
    print("capturing screen: {}".format(filename))
    viewport = set_window_size()  # captures the height
    # resets the window size to viewport dimensions
    driver.set_window_size(1920, viewport)
    set_window_size()  # sets the page to full view
    driver.get_screenshot_as_file('./{}/{}.png'.format(directory, filename))
    driver.set_window_size(1920, 1080)  # resets the window size to default


def set_window_size():
    total_height = driver.execute_script(
        "return document.body.parentNode.scrollHeight")
    viewport_height = driver.execute_script("return window.innerHeight")
    driver.set_window_size(1920, total_height)
    return viewport_height


def save_fullpage_screenshot(driver, output_path, tmp_prefix='', tmp_suffix='.png'):
    """
    Creates a full page screenshot using a selenium driver by scrolling and taking multiple screenshots,
    and stitching them into a single image.
    """

    # scroll up
    driver.execute_script("window.scrollTo(0, 0)")

    # get dimensions
    window_height = driver.execute_script('return window.innerHeight')
    scroll_height = driver.execute_script(
        'return document.body.parentNode.scrollHeight')
    num = int(math.ceil(float(scroll_height) / float(window_height)))

    # get temp files
    tempfiles = []
    for i in range(num):
        fd, path = tempfile.mkstemp(
            prefix='{0}-{1:02}-'.format(tmp_prefix, i+1), suffix=tmp_suffix)
        os.close(fd)
        tempfiles.append(path)
        pass

    try:
        # take screenshots
        for i, path in enumerate(tempfiles):
            if i > 0:
                driver.execute_script(
                    'window.scrollBy(%d,%d)' % (0, window_height))

            driver.save_screenshot(path)
            pass

        # stitch images together
        stiched = None
        for i, path in enumerate(tempfiles):
            img = Image.open(path)

            w, h = img.size
            y = i * window_height

            if i == (len(tempfiles) - 1):
                img = img.crop((0, h-(scroll_height % h), w, h))
                w, h = img.size
                pass

            if stiched is None:
                stiched = Image.new('RGB', (w, scroll_height))

            stiched.paste(img, (
                0,  # x0
                y,  # y0
                w,  # x1
                y + h  # y1
            ))
            pass
        stiched.save(output_path)
    finally:
        # cleanup
        for path in tempfiles:
            if os.path.isfile(path):
                os.remove(path)
        pass

    return output_path


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.protocol("WM_DELETE_WINDOW", exitFunc)
    top = New_Toplevel(root)
    scraper_support.init(root, top)
    root.mainloop()


w = None
threadFlag = False


def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    top = New_Toplevel(w)
    scraper_support.init(w, top, *args, **kwargs)

    return (w, top)


def exitFunc():
    global root, threadFlag, driver
    print("exitFunc")
    threadFlag = False
    driver.quit()
    root.destroy()


def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


def capture_time(interval, url):

    global threadFlag, driver
    threadFlag = True
    interval = float(interval)
    while threadFlag:
        execute_screenshot(driver, url, directory)
        time.sleep(interval)


class New_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'

        top.geometry("600x316+636+147")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")

        self.Button1 = Button(top)
        self.Button1.place(relx=0.43, rely=0.7, height=54, width=107)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Start''')
        self.Button1.configure(width=107)
        self.Button1.bind("<Button-1>", self.print_some_times)

        self.Entry1 = Entry(top)
        self.Entry1.place(relx=0.33, rely=0.16, height=40, relwidth=0.51)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.insert(0, "https://www.spotify.com")
        self.Entry1.configure(width=304)

        self.Entry2 = Entry(top)
        self.Entry2.place(relx=0.33, rely=0.41, height=40, relwidth=0.51)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.insert(0, "2")
        self.Entry2.configure(width=304)

        self.Label1 = Label(top)
        self.Label1.place(relx=0.1, rely=0.16, height=31, width=91)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Url''')
        self.Label1.configure(width=91)

        self.Label2 = Label(top)
        self.Label2.place(relx=0.1, rely=0.41, height=41, width=94)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Interval(sec)''')
        self.Label2.configure(width=94)

    def print_some_times(self, event):
        global threadFlag
        threadFlag = not threadFlag
        print(threadFlag)
        if(threadFlag == True):
            driver.get(self.Entry1.get())

            self.Button1.configure(text="Stop")
            threading.Thread(target=capture_time, args=(
                self.Entry2.get(), self.Entry1.get())).start()

        else:
            self.Button1.configure(text="Start")


if __name__ == '__main__':
    vp_start_gui()
